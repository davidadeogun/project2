const mongodb = require('../data/database');
const ObjectId = require('mongodb').ObjectId;

const getAll = async (req, res) => {
    const result = await mongodb.getDb().collection('tests').find();
    const tests = await result.toArray();

    if (tests.length === 0) {
        return res.status(404).json({ message: 'No such data was found' });
    }

    res.setHeader('Content-Type', 'application/json');
    res.status(200).json(tests);
};

const getSingle = async (req, res) => {
    if (!ObjectId.isValid(req.params.id)) {
        return res.status(400).json({ message: 'Invalid ID number or format' });
    }

    const userId = new ObjectId(req.params.id);
    const result = await mongodb.getDb().collection('tests').find({ _id: userId });
    const tests = await result.toArray();

    if (tests.length === 0) {
        return res.status(404).json({ message: 'No such data was found' });
    }

    res.setHeader('Content-Type', 'application/json');
    res.status(200).json(tests[0]);
};

const createUser = async (req, res) => {
    const newUser = {
        firstName: req.body.firstName,
        lastName: req.body.lastName,
        email: req.body.email,
        favoriteColor: req.body.favoriteColor,
        birthday: req.body.birthday
    };
    const response = await mongodb.getDb().collection('tests').insertOne(newUser);

    if (!response.acknowledged) {
        return res.status(400).json({ message: 'Error creating contact' });
    }

    res.status(200).send();
};

const updateUser = async (req, res) => {
    if (!ObjectId.isValid(req.params.id)) {
        return res.status(400).json({ message: 'Invalid ID number or format' });
    }

    const userId = new ObjectId(req.params.id);
    const newUser = {
        firstName: req.body.firstName,
        lastName: req.body.lastName,
        email: req.body.email,
        favoriteColor: req.body.favoriteColor,
        birthday: req.body.birthday
    };

    const response = await mongodb.getDb().collection('tests').replaceOne({ _id: userId }, newUser);
    if (response.modifiedCount === 0) {
        return res.status(404).json({ message: 'Contact not found or no changes made' });
    }

    res.status(200).send();
};

const deleteUser = async (req, res) => {
    if (!ObjectId.isValid(req.params.id)) {
        return res.status(400).json({ message: 'Invalid ID number or format' });
    }

    const userId = new ObjectId(req.params.id);
    const response = await mongodb.getDb().collection('tests').deleteOne({ _id: userId });

    if (response.deletedCount === 0) {
        return res.status(404).json({ message: 'No such data was found' });
    }

    res.status(204).send();
};


module.exports = { getAll, getSingle, createUser, updateUser, deleteUser };
